Explanation:
User Model: Extended from Django's built-in AbstractUser to include an is_admin field.
Profile Model: Contains additional user details and is linked to the User model via a one-to-one relationship.
Share Model: Represents user stories with fields for the title, content, creation and update timestamps, status, and average rating.
Comment Model: Contains comments on shares, linked to both the Share and User models.
Message Model: Represents private messages between users, linked to the User model for both the sender and receiver.
Rating Model: Contains ratings for shares, linked to both the Share and User models.
ServiceLink Model: Contains external service links with fields for URL and description.
This models.py file defines the database schema that corresponds to the ERD and supports the functionality outlined in the user stories.


from django.db import models
from django.contrib.auth.models import AbstractUser

class User(AbstractUser):
    is_admin = models.BooleanField(default=False)

class Profile(models.Model):
    user = models.OneToOneField(User, on_delete=models.CASCADE)
    name = models.CharField(max_length=100)
    bio = models.TextField(blank=True)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

class Share(models.Model):
    STATUS_CHOICES = [
        ('pending', 'Pending'),
        ('approved', 'Approved'),
        ('rejected', 'Rejected'),
    ]
    user = models.ForeignKey(User, on_delete=models.CASCADE)
    title = models.CharField(max_length=200)
    content = models.TextField()
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    status = models.CharField(max_length=10, choices=STATUS_CHOICES, default='pending')
    average_rating = models.FloatField(default=0.0)

class Comment(models.Model):
    share = models.ForeignKey(Share, on_delete=models.CASCADE, related_name='comments')
    user = models.ForeignKey(User, on_delete=models.CASCADE)
    content = models.TextField()
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

class Message(models.Model):
    sender = models.ForeignKey(User, related_name='sent_messages', on_delete=models.CASCADE)
    receiver = models.ForeignKey(User, related_name='received_messages', on_delete=models.CASCADE)
    content = models.TextField()
    created_at = models.DateTimeField(auto_now_add=True)
    is_read = models.BooleanField(default=False)

class Rating(models.Model):
    share = models.ForeignKey(Share, on_delete=models.CASCADE, related_name='ratings')
    user = models.ForeignKey(User, on_delete=models.CASCADE)
    rating_value = models.PositiveSmallIntegerField()
    created_at = models.DateTimeField(auto_now_add=True)

class ServiceLink(models.Model):
    url = models.URLField(max_length=200)
    description = models.TextField()
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    def __str__(self):
        return self.url
